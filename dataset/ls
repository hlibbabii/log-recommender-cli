
#!/usr/bin/env bash

#------------------------------------------------------------------------------------
set -e  # Fail on first error

# Some useful global variables and constants
CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
SCRIPT_NAME="$0"

REAL_CURRENT_DIR=$(readlink -f "$CURRENT_DIR")
PROJECT_ROOT="$REAL_CURRENT_DIR/.."
source $PROJECT_ROOT/.conf
source $PROJECT_ROOT/util.sh
source $PROJECT_ROOT/log4bash.sh
source $PROJECT_ROOT/common.sh

AUTOGEN_TPL="# This is automatically generated file! Do not edit!"
#------------------------------------------------------------------------------------

getProjectsNumber() {
    local _dataset_name="$1"
    local _result_var_name="$2"
    local _long_option="$3"
    
    local _n_projects_file=$RAW_DATASETS_METADATA_DIR/$_dataset_name/n_projects
    local _n_projects="UNK"
    if [ ! -f "$_n_projects_file" ]; then
        if [ "$_long_option" == "-ll" ]; then
            log_info "Counting number of projects for $_dataset_name ..."
            _n_projects=$(find "$RAW_DATASETS_DIR/$_dataset_name" -mindepth 2 -maxdepth 2 -type d | wc -l)  # finding number of subfolders in trai$
            echo -e "$AUTOGEN_TPL\n$_n_projects" > $_n_projects_file
        fi
    else
        _n_projects=$(tail -n 1 $_n_projects_file)
    fi
    printf -v "$_result_var_name" '%s' "$_n_projects" 
}

getFilesNumber() {
    local _dataset_name="$1"
    local _result_var_name="$2"
    local _long_option="$3"

    local _n_files_file=$RAW_DATASETS_METADATA_DIR/$_dataset_name/n_files
    local _n_files="UNK"
    if [ ! -f "$_n_files_file" ]; then
        if [ "$_long_option" == "-ll" ]; then
            log_info "Counting number of files in $_dataset_name ... It may take a while ..."
            _n_files=$( find "$RAW_DATASETS_DIR/$_dataset_name" -mindepth 2 -type f -name "*.java" | wc -l )
            echo -e "$AUTOGEN_TPL\n$_n_files" > $_n_files_file
        fi
    else
        _n_files=$(tail -n 1 $_n_files_file)
    fi
    printf -v "$_result_var_name" '%s' "$_n_files"
}

#TODO merge two methods below to avoid code duplication
getTokensNumber() {
    local _dataset_name="$1"
    local _result_var_name="$2"
    local _long_option="$3"

    local _n_tokens_file="$RAW_DATASETS_METADATA_DIR/$_dataset_name/n_tokens"
    local _n_tokens="UNK"
    if [[ ! -f "$_n_tokens_file" ]]; then
        if [[ "$_long_option" == "-ll" ]]; then
            log_info "Counting number of tokens in $_dataset_name ... It may take a while ..."
            _n_tokens=$( find "$RAW_DATASETS_DIR/${_dataset_name}" -mindepth 2 -type f -name "*.java" -exec wc -w {} + \
                                                                                                | awk '/total/{print $1}' | paste -sd+ | bc )
            echo -e "${AUTOGEN_TPL}\n${_n_tokens}" > ${_n_tokens_file}
        fi
    else
        _n_tokens=$(tail -n 1 $_n_tokens_file)
    fi
    printf -v "$_result_var_name" '%s' "$_n_tokens"
}

displayDatasetInfo() {
    local _dataset_name="$1"
    local _result_var_name="$2"
    local _long_option="$3"

    local _str="$_dataset_name"
    if [ -n "$_long_option" ]; then
        if [ ! -d "$RAW_DATASETS_METADATA_DIR/$_dataset_name" ]; then
            echo "Dataset metadata dir for $_dataset_name does not exist. Creating one..." 
            mkdir "$RAW_DATASETS_METADATA_DIR/$_dataset_name"
        fi

        getProjectsNumber "$_dataset_name" result "$_long_option"; local _n_projects=${result} 
        getFilesNumber    "$_dataset_name" result "$_long_option"; local _n_files=${result}
        getTokensNumber   "$_dataset_name" result "$_long_option"; local _n_tokens=${result}
               
	_str="$_str $_n_projects $_n_files $_n_tokens"
    fi
    printf -v "$_result_var_name" '%s' "$_str"
}

getPerformedPreps() {
    local _prep_name="$1"
    local _result_var_name="$2"
    
    local _str="$(echo $_prep_name | sed 's/\B/ /g')"

    printf -v "$_result_var_name" '%s' "$_str"
}

displayDatasetInfoVerbose() {
    local _dataset="$1"
    local _long_option="$2"

    if [[ ! -d "$RAW_DATASETS_DIR/$_dataset" ]]; then
        echo "$RAW_DATASETS_DIR/$_dataset"
        echo -e "Dataset $_dataset does not exist"
        $CURRENT_DIR/$SCRIPT_NAME
        exit 44
    fi

    displayGeneralDatasetInfoVerbose $_dataset
    
    local _all_preps_loc="$PARSED_DATASETS_DIR/$_dataset/metadata"
    echo "Preprocessings:   (Location: $_all_preps_loc)"
    echo
    local _str="-|------------"
    for prep_param in "${PREPROCESSING_PARAMS[@]}"; do
        _str="$_str $prep_param"
    done
    _str="$_str tokens"
    _str="$_str vocabsize"
    _str="$_str \n"
    for _prep_loc in $_all_preps_loc/*; do
        local _prep_name="$(basename $_prep_loc)"
        if [ "$_prep_name" == "*" ]; then
            continue
        fi
        
        getPerformedPreps        $_prep_name               result                ; _performed_preps="${result}"
        getTokensNumberInRepr    $_dataset $_prep_name    result   $_long_option; _n_tokens="${result}"
        getVocabSize             $_dataset $_prep_name    result   $_long_option; _vocabsize="${result}"
 
        _str="$_str $_prep_name ${_performed_preps} $_n_tokens $_vocabsize\n" 
    done
    echo -e $_str | column -t
    echo    
}

if [ x"$1" == x"-l" ]; then
    long_option="-l"
    shift 1
fi

if [ x"$1" == x"-ll" ]; then
    long_option="-ll"
    shift 1
fi

if [ -n "$1" ]; then
    DATASET="$1"
fi

checkVarInConf RAW_DATASETS_DIR
checkVarInConf RAW_DATASETS_METADATA_DIR
checkVarInConf PARSED_DATASETS_DIR
checkVarInConf PREPROCESSING_PARAMS
checkVarInConf PATH_TO_PROJECT
checkVarInConf PYTHON

checkDirExists RAW_DATASETS_DIR
checkDirExists RAW_DATASETS_METADATA_DIR
checkDirExists PARSED_DATASETS_DIR

if [ -n "$DATASET" ]; then
    displayDatasetInfoVerbose "$DATASET" "$long_option"
else
    echo -e "Raw datasets: (Location: $RAW_DATASETS_DIR)\n"
    datasets_info=""
    if [[ -n "$long_option" ]]; then
        datasets_info="-|- projects file tokens\n"
    fi
    for dir in $RAW_DATASETS_DIR/*; do
        dir_basename=$(basename $dir)
        displayDatasetInfo "$dir_basename" result "$long_option"; dataset_info=${result}
        datasets_info="${datasets_info}${dataset_info}\n"
    done
    echo -e "${datasets_info}" | column -t
    echo
fi
